1.Vuex
Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。
它采用集中式存储管理应用的所有组件的状态，
并以相应的规则保证状态以一种可预测的方式发生变化。
Vuex 也集成到 Vue 的官方调试工具 devtools extension，
提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。

1.安装vuex
在vue项目中运行：
npm install vuex --save

2.在一个模块化的打包系统中，您必须显式地通过 Vue.use() 来安装 Vuex：
src/vue/store.js


3.在仓库中定义：
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

4.配置模版 script中引用
import store from '@/vuexstore/store'
name:"",
data:{}.
store
5.配置路由
引入模版---> 访问

###############
####具体讲解####
##############

一丶state：状态对象
声明:
const state{
    状态属性：状态值
}
调用插值：
第一种：
import { mapState } from 'vuex'
computed: mapState(['count']),
这样可以直接访问 count值了
第二种：
直接用
import store from '@/vuexstore/store'
在data()中添加 store
插值：
{{$store.state.count}}
第三种：
import { mapState } from 'vuex'
computed: mapState({
     count:state=>state.count
 }),

二、mutations：改变状态对象
声明:
const mutations={
    函数名(状态对象(state)){
        state.状态属性 操作
    }
}
调用：
引用仓库： import store from '@/vuexstore/store'
并在 export default｛ store ｝
@click="$store.commit('函数名')"
第二种方法：直接调用
@click = "方法名"
import{ mapMutations} from 'vuex'
export default｛
methods：mapMutations(['方法名'])
｝

三丶getters 计算过滤操作
声明：
const getters = {
  对象属性: 函数名 (state) {
    state.对象属性 计算公式
  }
}
调用
import { mapGetters } from 'vuex'
computed: {
    ...mapGetters(['count'])
    // count () {
    //   return this.$store.getters.count
    // }
  },

四丶action 异步修改状态
声明：
const actions = {
  函数名 (参数) {
    执行方法
  }
}
调用：
import { mapActions} from 'vuex'
methods: {
   ...mapActions(['函数名1','函数名2'])
}
@click="函数名"

五丶module 模块组
声明：
const moduleA=｛
    state，getters,actions等
｝
export default new Vuex.Store({
    modules:{a:moduleA}
})
调用:
{{$store.state.a.count}}
computed: {
    count(){
        return this.$store.state.a.count
    }
}


